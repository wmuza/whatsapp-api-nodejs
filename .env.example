# ==================================
# SECURITY CONFIGURATION
# ==================================
# Important: Set TOKEN to a random string to protect the routes
TOKEN=RANDOM_STRING_HERE
PROTECT_ROUTES=false

# ==================================
# SERVER CONFIGURATION
# ==================================
PORT=3333
APP_URL=

# ==================================
# LOGGING
# ==================================
# Available levels: trace, debug, info, warn, error, fatal
LOG_LEVEL=info

# ==================================
# INSTANCE CONFIGURATION
# ==================================
RESTORE_SESSIONS_ON_START_UP=false
INSTANCE_MAX_RETRY_QR=2

# ==================================
# CLIENT CONFIGURATION
# ==================================
CLIENT_PLATFORM=Whatsapp MD
CLIENT_BROWSER=Chrome
CLIENT_VERSION=4.0.0

# ==================================
# MONGODB CONFIGURATION
# ==================================
# Set to 'true' to enable MongoDB for session storage
MONGODB_ENABLED=false
MONGODB_URL=mongodb://127.0.0.1:27017/whatsapp_api

# ==================================
# WEBHOOK CONFIGURATION
# ==================================
# Set to 'true' to enable global webhook
WEBHOOK_ENABLED=false
# Your webhook URL (e.g., https://your-domain.com/webhook)
WEBHOOK_URL=
# Set to 'true' to include base64 message content in webhook (not recommended with GCS)
WEBHOOK_BASE64=false
# Comma-separated list of events to forward (e.g., all,messages,call)
# Available: all, connection, connection:open, connection:close, presense, messages,
#            messages.upsert, call, call:terminate, call:offer, groups, group_participants
WEBHOOK_ALLOWED_EVENTS=all
# Set to 'true' to automatically mark messages as read
MARK_MESSAGES_READ=false

# ==================================
# GOOGLE CLOUD STORAGE CONFIGURATION
# ==================================
# When enabled, media files (images, videos, audio, documents) will be uploaded to
# Google Cloud Storage and public URLs will be sent in webhooks instead of base64-encoded
# buffers. This significantly reduces webhook payload size and improves performance.
#
# Benefits:
# - Smaller webhook payloads (~50 bytes URL vs MB of base64)
# - Better performance and reliability
# - Persistent media storage
# - CDN support for faster global delivery
#
# Set to 'true' to enable GCS media uploads
GCS_ENABLED=true

# Your GCS bucket name (required if GCS_ENABLED=true)
# Using the same Firebase Storage bucket from backend
GCS_BUCKET_NAME=hubspot-api-developer.appspot.com

# Your GCP project ID (required if GCS_ENABLED=true)
GCS_PROJECT_ID=hubspot-api-developer

# Authentication Options (choose one):
#
# Option 1 (Recommended - Same as backend): Use inline JSON credentials
# Copy the STORAGE_CREDENTIALS value from backend .env to here
# This matches how the backend authenticates with GCS
STORAGE_CREDENTIALS=

# Option 2: Path to service account key JSON file
# Save credentials to a file and reference it here
# Example: GCS_KEY_FILE=/path/to/hubspot-api-developer-credentials.json
GCS_KEY_FILE=

# Option 3: Use GOOGLE_APPLICATION_CREDENTIALS environment variable
# Set this in your environment instead of in .env:
# export GOOGLE_APPLICATION_CREDENTIALS=/path/to/hubspot-api-developer-credentials.json

# Custom public URL base for uploaded files (optional)
# Use this if you have a CDN or custom domain in front of your GCS bucket
# Example: https://cdn.yourdomain.com
# If not set, uses default GCS public URL: https://storage.googleapis.com/BUCKET_NAME/
GCS_PUBLIC_URL_BASE=
